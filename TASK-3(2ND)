#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <sstream>

const int WINDOW_WIDTH = 600;
const int WINDOW_HEIGHT = 800;
const float PLAYER_SPEED = 300.f;
const float OBSTACLE_SPEED_START = 150.f;
const float OBSTACLE_SPEED_INCREMENT = 20.f;
const int OBSTACLE_SPAWN_START = 1200; // milliseconds
const int OBSTACLE_SPAWN_MIN = 300;

struct Obstacle {
    sf::RectangleShape shape;
    float speed;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Dodge the Falling Objects!");
    window.setFramerateLimit(60);
    srand(static_cast<unsigned>(time(nullptr)));

    // Load sound
    sf::SoundBuffer hitBuffer;
    if (!hitBuffer.loadFromFile("assets/hit.wav")) return -1;
    sf::Sound hitSound;
    hitSound.setBuffer(hitBuffer);

    // Load font
    sf::Font font;
    if (!font.loadFromFile("assets/arial.ttf")) return -1;

    // Player setup
    sf::RectangleShape player(sf::Vector2f(60, 30));
    player.setFillColor(sf::Color::Cyan);
    player.setPosition(WINDOW_WIDTH/2 - 30, WINDOW_HEIGHT - 80);

    std::vector<Obstacle> obstacles;
    sf::Clock gameClock, spawnClock;
    float obstacleSpeed = OBSTACLE_SPEED_START;
    int obstacleSpawnRate = OBSTACLE_SPAWN_START;
    int score = 0;
    bool isGameOver = false;

    // Score text
    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(30);
    scoreText.setFillColor(sf::Color::White);

    sf::Text gameOverText;
    gameOverText.setFont(font);
    gameOverText.setCharacterSize(40);
    gameOverText.setFillColor(sf::Color::Red);
    gameOverText.setString("GAME OVER!\nPress R to Restart");

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if(event.type == sf::Event::Closed)
                window.close();
            if(isGameOver && event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::R) {
                // Reset game
                obstacles.clear();
                player.setPosition(WINDOW_WIDTH/2 - 30, WINDOW_HEIGHT - 80);
                obstacleSpeed = OBSTACLE_SPEED_START;
                obstacleSpawnRate = OBSTACLE_SPAWN_START;
                score = 0;
                isGameOver = false;
                gameClock.restart();
                spawnClock.restart();
            }
        }

        float dt = gameClock.restart().asSeconds();

        // Player movement
        if (!isGameOver) {
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && player.getPosition().x > 0)
                player.move(-PLAYER_SPEED * dt, 0);
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && player.getPosition().x < WINDOW_WIDTH - player.getSize().x)
                player.move(PLAYER_SPEED * dt, 0);
        }

        // Obstacle spawning
        if (!isGameOver && spawnClock.getElapsedTime().asMilliseconds() > obstacleSpawnRate) {
            Obstacle obs;
            obs.shape = sf::RectangleShape(sf::Vector2f(50, 30));
            obs.shape.setFillColor(sf::Color::Yellow);
            obs.shape.setPosition(rand() % (WINDOW_WIDTH - 50), -30);
            obs.speed = obstacleSpeed;
            obstacles.push_back(obs);
            spawnClock.restart();

            // Increase difficulty
            if (obstacleSpawnRate > OBSTACLE_SPAWN_MIN)
                obstacleSpawnRate -= 10; // spawn faster
            obstacleSpeed += OBSTACLE_SPEED_INCREMENT * 0.02f; // fall faster
        }

        // Move obstacles
        for (auto& obs : obstacles) {
            obs.shape.move(0, obs.speed * dt);
        }

        // Remove obstacles out of screen & increase score
        obstacles.erase(std::remove_if(obstacles.begin(), obstacles.end(), [&](Obstacle& obs){
            if (obs.shape.getPosition().y > WINDOW_HEIGHT) {
                score++;
                return true;
            }
            return false;
        }), obstacles.end());

        // Collision detection
        for (auto& obs : obstacles) {
            if (obs.shape.getGlobalBounds().intersects(player.getGlobalBounds())) {
                hitSound.play();
                isGameOver = true;
            }
        }

        // Draw everything
        window.clear(sf::Color(30,30,60));
        window.draw(player);
        for (auto& obs : obstacles)
            window.draw(obs.shape);

        // Draw score
        std::stringstream ss;
        ss << "Score: " << score;
        scoreText.setString(ss.str());
        scoreText.setPosition(20, 20);
        window.draw(scoreText);

        if (isGameOver) {
            gameOverText.setPosition(WINDOW_WIDTH / 2 - 150, WINDOW_HEIGHT / 2 - 80);
            window.draw(gameOverText);
        }

        window.display();
    }
    return 0;
}
