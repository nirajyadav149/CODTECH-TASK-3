#include <SFML/Graphics.hpp>
#include <deque>
#include <cstdlib>
#include <ctime>

const int WINDOW_WIDTH = 600;
const int WINDOW_HEIGHT = 600;
const int CELL_SIZE = 20;
const int GRID_WIDTH = WINDOW_WIDTH / CELL_SIZE;
const int GRID_HEIGHT = WINDOW_HEIGHT / CELL_SIZE;

enum Direction { UP, DOWN, LEFT, RIGHT };

struct SnakeGame {
    std::deque<sf::Vector2i> snake;
    Direction dir;
    sf::Vector2i food;
    int score;
    bool gameOver;

    SnakeGame() {
        reset();
    }

    void reset() {
        snake.clear();
        snake.push_back({GRID_WIDTH/2, GRID_HEIGHT/2});
        dir = RIGHT;
        placeFood();
        score = 0;
        gameOver = false;
    }

    void placeFood() {
        srand(time(nullptr));
        while (true) {
            food = {rand() % GRID_WIDTH, rand() % GRID_HEIGHT};
            bool onSnake = false;
            for (auto& s : snake) {
                if (s == food) { onSnake = true; break; }
            }
            if (!onSnake) break;
        }
    }

    void changeDirection(Direction newDir) {
        // Prevent reversing
        if ((dir == UP && newDir == DOWN) ||
            (dir == DOWN && newDir == UP) ||
            (dir == LEFT && newDir == RIGHT) ||
            (dir == RIGHT && newDir == LEFT))
            return;
        dir = newDir;
    }

    void update() {
        if (gameOver) return;
        sf::Vector2i head = snake.front();
        switch (dir) {
            case UP:    head.y--; break;
            case DOWN:  head.y++; break;
            case LEFT:  head.x--; break;
            case RIGHT: head.x++; break;
        }
        // Check collision
        if (head.x < 0 || head.x >= GRID_WIDTH || head.y < 0 || head.y >= GRID_HEIGHT) {
            gameOver = true;
            return;
        }
        for (auto& s : snake) {
            if (head == s) {
                gameOver = true;
                return;
            }
        }
        snake.push_front(head);
        if (head == food) {
            score++;
            placeFood();
        } else {
            snake.pop_back();
        }
    }
};

int main() {
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Snake Game (SFML)");
    window.setFramerateLimit(60);

    SnakeGame game;
    sf::Clock clock;
    float timer = 0, delay = 0.1f; // snake updates every 0.1s

    // Colors
    sf::Color snakeColor = sf::Color::Green;
    sf::Color foodColor = sf::Color::Red;

    while (window.isOpen()) {
        // Input
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) window.close();
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Up)    game.changeDirection(UP);
                if (event.key.code == sf::Keyboard::Down)  game.changeDirection(DOWN);
                if (event.key.code == sf::Keyboard::Left)  game.changeDirection(LEFT);
                if (event.key.code == sf::Keyboard::Right) game.changeDirection(RIGHT);
                if (event.key.code == sf::Keyboard::R && game.gameOver) game.reset();
            }
        }
        // Update
        float dt = clock.restart().asSeconds();
        timer += dt;
        if (timer > delay && !game.gameOver) {
            game.update();
            timer = 0;
        }

        // Draw
        window.clear(sf::Color::Black);
        // Draw food
        sf::RectangleShape foodShape(sf::Vector2f(CELL_SIZE, CELL_SIZE));
        foodShape.setFillColor(foodColor);
        foodShape.setPosition(game.food.x * CELL_SIZE, game.food.y * CELL_SIZE);
        window.draw(foodShape);

        // Draw snake
        sf::RectangleShape snakeShape(sf::Vector2f(CELL_SIZE, CELL_SIZE));
        for (auto& s : game.snake) {
            snakeShape.setPosition(s.x * CELL_SIZE, s.y * CELL_SIZE);
            snakeShape.setFillColor(s == game.snake.front() ? sf::Color::Yellow : snakeColor);
            window.draw(snakeShape);
        }

        // Game over text
        if (game.gameOver) {
            sf::Font font;
            if (font.loadFromFile("arial.ttf")) { // Make sure arial.ttf is available
                sf::Text text("Game Over!\nScore: " + std::to_string(game.score) + "\nPress R to restart", font, 32);
                text.setFillColor(sf::Color::White);
                text.setPosition(70, WINDOW_HEIGHT/2 - 60);
                window.draw(text);
            }
        }

        window.display();
    }
    return 0;
}
